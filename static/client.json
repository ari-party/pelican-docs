{
  "openapi": "3.1.0",
  "info": {
    "title": "Pelican",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://pelican.test/api/client"
    }
  ],
  "security": [
    {
      "http": []
    }
  ],
  "paths": {
    "/account": {
      "get": {
        "operationId": "api:client.account",
        "summary": "View account",
        "tags": ["Account"],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/account/email": {
      "put": {
        "operationId": "api:client.account.update-email",
        "description": "Update the authenticated user's email address.\u26a0\ufe0fCannot generate request documentation: App\\Models\\User::getRulesForUpdate(): Argument #1 ($model) must be of type App\\Models\\User, null given, called in /Users/scai/Clients/pelican/panel/app/Http/Requests/Api/Client/Account/UpdateEmailRequest.php on line 34",
        "summary": "Update email",
        "tags": ["Account"],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/account/password": {
      "put": {
        "operationId": "api:client.account.update-password",
        "description": "Update the authenticated user's password. All existing sessions will be logged\nout immediately.",
        "summary": "Update password",
        "tags": ["Account"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  },
                  "password_confirmation": {
                    "type": "string"
                  }
                },
                "required": ["password", "password_confirmation"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/account/activity": {
      "get": {
        "operationId": "api:client.account.activity",
        "description": "Returns a paginated set of the user's activity logs.",
        "summary": "List activity logs",
        "tags": ["ActivityLog"],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "default": "25"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/activity": {
      "get": {
        "operationId": "api:client:server.activity",
        "description": "Returns the activity logs for a server.",
        "summary": "List activity logs",
        "tags": ["ActivityLog"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "default": "25"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/account/api-keys": {
      "get": {
        "operationId": "apiKey.index",
        "description": "Returns all the API keys that exist for the given client.",
        "summary": "List api keys",
        "tags": ["ApiKey"],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "post": {
        "operationId": "apiKey.store",
        "description": "Store a new API key for a user's account.",
        "summary": "Create api key",
        "tags": ["ApiKey"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": ["string", "null"]
                  },
                  "allowed_ips": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 50
                  }
                },
                "required": ["description"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/account/api-keys/{identifier}": {
      "delete": {
        "operationId": "apiKey.delete",
        "description": "Deletes a given API key.",
        "summary": "Delete api key",
        "tags": ["ApiKey"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/backups": {
      "get": {
        "operationId": "backup.index",
        "description": "Returns all the backups for a given server instance in a paginated\nresult set.",
        "summary": "List backups",
        "tags": ["Backup"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "post": {
        "operationId": "backup.store",
        "description": "Starts the backup process for a server.",
        "summary": "Create backup",
        "tags": ["Backup"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": ["string", "null"]
                  },
                  "is_locked": {
                    "type": ["boolean", "null"]
                  },
                  "ignored": {
                    "type": ["string", "null"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/backups/{backup}": {
      "get": {
        "operationId": "backup.view",
        "description": "Returns information about a single backup.",
        "summary": "View backup",
        "tags": ["Backup"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "backup",
            "in": "path",
            "required": true,
            "description": "The backup UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "delete": {
        "operationId": "backup.delete",
        "description": "Deletes a backup from the panel as well as the remote source where it is currently\nbeing stored.",
        "summary": "Delete backup",
        "tags": ["Backup"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "backup",
            "in": "path",
            "required": true,
            "description": "The backup UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/servers/{server}/backups/{backup}/download": {
      "get": {
        "operationId": "backup.download",
        "description": "Download the backup for a given server instance. For daemon local files, the file\nwill be streamed back through the Panel. For AWS S3 files, a signed URL will be generated\nwhich the user is redirected to.",
        "summary": "Download backup",
        "tags": ["Backup"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "backup",
            "in": "path",
            "required": true,
            "description": "The backup UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "example": "signed_url"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": ["url"]
                    }
                  },
                  "required": ["object", "attributes"]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/servers/{server}/backups/{backup}/lock": {
      "post": {
        "operationId": "backup.toggleLock",
        "description": "Toggles the lock status of a given backup for a server.",
        "summary": "Toggle lock",
        "tags": ["Backup"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "backup",
            "in": "path",
            "required": true,
            "description": "The backup UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/servers/{server}/backups/{backup}/restore": {
      "post": {
        "operationId": "backup.restore",
        "description": "Handles restoring a backup by making a request to the daemon instance telling it\nto begin the process of finding (or downloading) the backup and unpacking it\nover the server files.\n\nIf the \"truncate\" flag is passed through in this request then all the\nfiles that currently exist on the server will be deleted before restoring.\nOtherwise, the archive will simply be unpacked over the existing files.",
        "summary": "Restore backup",
        "tags": ["Backup"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "backup",
            "in": "path",
            "required": true,
            "description": "The backup UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "truncate": {
                    "type": "boolean"
                  }
                },
                "required": ["truncate"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/": {
      "get": {
        "operationId": "api:client.index",
        "description": "Return all the servers available to the client making the API\nrequest, including servers the user has access to as a subuser.",
        "summary": "List servers",
        "tags": ["Client"],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "default": "50"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "operationId": "client.permissions",
        "description": "Returns all the subuser permissions available on the system.",
        "summary": "List subuser permissions",
        "tags": ["Client"],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "example": "system_permissions"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "permissions": {
                          "type": "string"
                        }
                      },
                      "required": ["permissions"]
                    }
                  },
                  "required": ["object", "attributes"]
                }
              }
            }
          }
        }
      }
    },
    "/servers/{server}/command": {
      "post": {
        "operationId": "command.index",
        "description": "Send a command to a running server.",
        "summary": "Send command",
        "tags": ["Command"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "command": {
                    "type": "string"
                  }
                },
                "required": ["command"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/databases": {
      "get": {
        "operationId": "database.index",
        "description": "Return all the databases that belong to the given server.",
        "summary": "List databases",
        "tags": ["Database"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "post": {
        "operationId": "database.store",
        "description": "Create a new database for the given server and return it.\u26a0\ufe0fCannot generate request documentation: Call to a member function parameter() on null",
        "summary": "Create database",
        "tags": ["Database"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/databases/{database}/rotate-password": {
      "post": {
        "operationId": "database.rotatePassword",
        "description": "Rotates the password for the given server model and returns a fresh instance to\nthe caller.",
        "summary": "Rotate password",
        "tags": ["Database"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The database ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/databases/{database}": {
      "delete": {
        "operationId": "database.delete",
        "description": "Removes a database from the server.",
        "summary": "Delete database",
        "tags": ["Database"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The database ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/list": {
      "get": {
        "operationId": "file.directory",
        "description": "Returns a listing of files in a given directory.",
        "summary": "List files",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directory",
            "in": "query",
            "schema": {
              "type": ["string", "null"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/contents": {
      "get": {
        "operationId": "file.contents",
        "description": "Return the contents of a specified file for the user.",
        "summary": "View file",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/download": {
      "get": {
        "operationId": "file.download",
        "description": "Generates a one-time token with a link that the user can use to\ndownload a given file.",
        "summary": "Download file",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "example": "signed_url"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": ["url"]
                    }
                  },
                  "required": ["object", "attributes"]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/rename": {
      "put": {
        "operationId": "file.rename",
        "description": "Renames a file on the remote machine.",
        "summary": "Rename file",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "root": {
                    "type": ["string", "null"]
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "to": {
                          "type": "string"
                        },
                        "from": {
                          "type": "string"
                        }
                      },
                      "required": ["to", "from"]
                    }
                  }
                },
                "required": ["root", "files"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/copy": {
      "post": {
        "operationId": "file.copy",
        "description": "Copies a file on the server.",
        "summary": "Copy file",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "location": {
                    "type": "string"
                  }
                },
                "required": ["location"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/write": {
      "post": {
        "operationId": "file.write",
        "description": "Writes the contents of the specified file to the server.",
        "summary": "Write file",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string"
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/compress": {
      "post": {
        "operationId": "file.compress",
        "summary": "Compress files",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "root": {
                    "type": ["string", "null"]
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": ["files"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/decompress": {
      "post": {
        "operationId": "file.decompress",
        "summary": "Decompress files",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "root": {
                    "type": ["string", "null"]
                  },
                  "file": {
                    "type": "string"
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/delete": {
      "post": {
        "operationId": "file.delete",
        "description": "Deletes files or folders for the server in the given root directory.",
        "summary": "Delete files/ folders",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "root": {
                    "type": ["string", "null"]
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": ["root", "files"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/create-folder": {
      "post": {
        "operationId": "file.create",
        "description": "Creates a new folder on the server.",
        "summary": "Create directory",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "root": {
                    "type": ["string", "null"]
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/chmod": {
      "post": {
        "operationId": "file.chmod",
        "description": "Updates file permissions for file(s) in the given root directory.",
        "summary": "Update file permissions",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "root": {
                    "type": ["string", "null"]
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "file": {
                          "type": "string"
                        },
                        "mode": {
                          "type": "number"
                        }
                      },
                      "required": ["file", "mode"]
                    }
                  }
                },
                "required": ["root", "files"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/pull": {
      "post": {
        "operationId": "file.pull",
        "description": "Requests that a file be downloaded from a remote location by daemon.",
        "summary": "Pull remote file",
        "tags": ["File"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "directory": {
                    "type": ["string", "null"]
                  },
                  "filename": {
                    "type": ["string", "null"]
                  },
                  "use_header": {
                    "type": "boolean"
                  },
                  "foreground": {
                    "type": "boolean"
                  }
                },
                "required": ["url"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/files/upload": {
      "get": {
        "operationId": "servers.fileUpload",
        "description": "Returns an url where files can be uploaded to.",
        "summary": "Get upload url",
        "tags": ["FileUpload"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "example": "signed_url"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": ["url"]
                    }
                  },
                  "required": ["object", "attributes"]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/network/allocations": {
      "get": {
        "operationId": "networkAllocation.index",
        "description": "Lists all the allocations available to a server and whether\nthey are currently assigned as the primary for this server.",
        "summary": "List allocations",
        "tags": ["NetworkAllocation"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "post": {
        "operationId": "networkAllocation.store",
        "description": "Set the notes for the allocation for a server.",
        "summary": "Create allocation",
        "tags": ["NetworkAllocation"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/network/allocations/{allocation}": {
      "post": {
        "operationId": "networkAllocation.update",
        "description": "Set the primary allocation for a server.",
        "summary": "Update allocation",
        "tags": ["NetworkAllocation"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allocation",
            "in": "path",
            "required": true,
            "description": "The allocation ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notes": {
                    "type": ["string", "null"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "delete": {
        "operationId": "networkAllocation.delete",
        "description": "Delete an allocation from a server.",
        "summary": "Delete allocation",
        "tags": ["NetworkAllocation"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allocation",
            "in": "path",
            "required": true,
            "description": "The allocation ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/network/allocations/{allocation}/primary": {
      "post": {
        "operationId": "networkAllocation.setPrimary",
        "description": "Set the primary allocation for a server.",
        "summary": "Set primar<",
        "tags": ["NetworkAllocation"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allocation",
            "in": "path",
            "required": true,
            "description": "The allocation ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/power": {
      "post": {
        "operationId": "power.index",
        "description": "Send a power action to a server.",
        "summary": "Send power action",
        "tags": ["Power"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "signal": {
                    "type": "string",
                    "enum": ["start", "stop", "restart", "kill"]
                  }
                },
                "required": ["signal"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/resources": {
      "get": {
        "operationId": "api:client:server.resources",
        "description": "Return the current resource utilization for a server. This value is cached for up to\n20 seconds at a time to ensure that repeated requests to this endpoint do not cause\na flood of unnecessary API calls.",
        "summary": "View resources",
        "tags": ["ResourceUtilization"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/account/ssh-keys": {
      "get": {
        "operationId": "sSHKey.index",
        "description": "Returns all the SSH keys that have been configured for the logged-in\nuser account.",
        "summary": "List ssh keys",
        "tags": ["SSHKey"],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "post": {
        "operationId": "sSHKey.store",
        "description": "Stores a new SSH key for the authenticated user's account.",
        "summary": "Create ssh keys",
        "tags": ["SSHKey"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "public_key": {
                    "type": "string"
                  }
                },
                "required": ["name", "public_key"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/account/ssh-keys/remove": {
      "post": {
        "operationId": "sSHKey.delete",
        "description": "Deletes an SSH key from the user's account.",
        "summary": "Delete ssh keys",
        "tags": ["SSHKey"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fingerprint": {
                    "type": "string"
                  }
                },
                "required": ["fingerprint"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/schedules": {
      "get": {
        "operationId": "schedule.index",
        "description": "Returns all the schedules belonging to a given server.",
        "summary": "List schedules",
        "tags": ["Schedule"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "post": {
        "operationId": "schedule.store",
        "description": "Store a new schedule for a server.",
        "summary": "Create schedule",
        "tags": ["Schedule"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "is_active": {
                    "type": "boolean"
                  },
                  "only_when_online": {
                    "type": "boolean"
                  },
                  "minute": {
                    "type": "string"
                  },
                  "hour": {
                    "type": "string"
                  },
                  "day_of_month": {
                    "type": "string"
                  },
                  "month": {
                    "type": "string"
                  },
                  "day_of_week": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "minute",
                  "hour",
                  "day_of_month",
                  "month",
                  "day_of_week"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/schedules/{schedule}": {
      "get": {
        "operationId": "schedule.view",
        "description": "Returns a specific schedule for the server.",
        "summary": "View schedule",
        "tags": ["Schedule"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schedule",
            "in": "path",
            "required": true,
            "description": "The schedule ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "post": {
        "operationId": "schedule.update",
        "description": "Updates a given schedule with the new data provided.",
        "summary": "Update schedule",
        "tags": ["Schedule"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schedule",
            "in": "path",
            "required": true,
            "description": "The schedule ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "is_active": {
                    "type": "boolean"
                  },
                  "only_when_online": {
                    "type": "boolean"
                  },
                  "minute": {
                    "type": "string"
                  },
                  "hour": {
                    "type": "string"
                  },
                  "day_of_month": {
                    "type": "string"
                  },
                  "month": {
                    "type": "string"
                  },
                  "day_of_week": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "minute",
                  "hour",
                  "day_of_month",
                  "month",
                  "day_of_week"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "delete": {
        "operationId": "schedule.delete",
        "description": "Deletes a schedule and it's associated tasks.",
        "summary": "Delete schedule",
        "tags": ["Schedule"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schedule",
            "in": "path",
            "required": true,
            "description": "The schedule ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/schedules/{schedule}/execute": {
      "post": {
        "operationId": "schedule.execute",
        "description": "Executes a given schedule immediately rather than waiting on it's normally scheduled time\nto pass. This does not care about the schedule state.",
        "summary": "Run schedule",
        "tags": ["Schedule"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schedule",
            "in": "path",
            "required": true,
            "description": "The schedule ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/schedules/{schedule}/tasks": {
      "post": {
        "operationId": "scheduleTask.store",
        "description": "Create a new task for a given schedule and store it in the database.",
        "summary": "Create task",
        "tags": ["ScheduleTask"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schedule",
            "in": "path",
            "required": true,
            "description": "The schedule ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": ["command", "power", "backup", "delete_files"]
                  },
                  "payload": {
                    "type": ["string", "null"]
                  },
                  "time_offset": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 900
                  },
                  "sequence_id": {
                    "type": "number",
                    "minimum": 1
                  },
                  "continue_on_failure": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "action",
                  "time_offset",
                  "sequence_id",
                  "continue_on_failure"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/schedules/{schedule}/tasks/{task}": {
      "post": {
        "operationId": "scheduleTask.update",
        "description": "Updates a given task for a server.",
        "summary": "Update task",
        "tags": ["ScheduleTask"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schedule",
            "in": "path",
            "required": true,
            "description": "The schedule ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "task",
            "in": "path",
            "required": true,
            "description": "The task ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": ["command", "power", "backup", "delete_files"]
                  },
                  "payload": {
                    "type": ["string", "null"]
                  },
                  "time_offset": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 900
                  },
                  "sequence_id": {
                    "type": "number",
                    "minimum": 1
                  },
                  "continue_on_failure": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "action",
                  "time_offset",
                  "sequence_id",
                  "continue_on_failure"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "delete": {
        "operationId": "scheduleTask.delete",
        "description": "Delete a given task for a schedule. If there are subsequent tasks stored in the database\nfor this schedule their sequence IDs are decremented properly.",
        "summary": "Delete task",
        "tags": ["ScheduleTask"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schedule",
            "in": "path",
            "required": true,
            "description": "The schedule ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "task",
            "in": "path",
            "required": true,
            "description": "The task ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}": {
      "get": {
        "operationId": "api:client:server.view",
        "description": "Transform an individual server into a response that can be consumed by a\nclient using the API.",
        "summary": "View server",
        "tags": ["Server"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/settings/rename": {
      "post": {
        "operationId": "settings.rename",
        "description": "Renames a server.",
        "summary": "Rename",
        "tags": ["Settings"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": ["string", "null"]
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/settings/reinstall": {
      "post": {
        "operationId": "settings.reinstall",
        "description": "Reinstalls the server on the daemon.",
        "summary": "Reinstall",
        "tags": ["Settings"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/settings/docker-image": {
      "put": {
        "operationId": "settings.dockerImage",
        "description": "Changes the Docker image in use by the server.\u26a0\ufe0fCannot generate request documentation: Call to a member function parameter() on null",
        "summary": "Change docker image",
        "tags": ["Settings"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/startup": {
      "get": {
        "operationId": "startup.index",
        "description": "Returns the startup information for the server including all the variables.",
        "summary": "List startup variables",
        "tags": ["Startup"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/startup/variable": {
      "put": {
        "operationId": "startup.update",
        "description": "Updates a single variable for a server.\u26a0\ufe0fCannot generate request documentation: Undefined variable $variable",
        "summary": "Update startup variable",
        "tags": ["Startup"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/users": {
      "get": {
        "operationId": "subuser.index",
        "description": "Return the users associated with this server instance.",
        "summary": "List subusers",
        "tags": ["Subuser"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "post": {
        "operationId": "subuser.store",
        "description": "Create a new subuser for the given server.",
        "summary": "Create subuser",
        "tags": ["Subuser"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": ["email", "permissions"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/servers/{server}/users/{user}": {
      "get": {
        "operationId": "subuser.view",
        "description": "Returns a single subuser associated with this server instance.",
        "summary": "View subusers",
        "tags": ["Subuser"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "post": {
        "operationId": "subuser.update",
        "description": "Update a given subuser in the system for the server.",
        "summary": "Update subuser",
        "tags": ["Subuser"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": ["permissions"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      },
      "delete": {
        "operationId": "subuser.delete",
        "description": "Removes a subusers from a server's assignment.",
        "summary": "Delete subuser",
        "tags": ["Subuser"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/account/two-factor": {
      "get": {
        "operationId": "twoFactor.index",
        "description": "Returns two-factor token credentials that allow a user to configure\nit on their account. If two-factor is already enabled this endpoint\nwill return a 400 error.",
        "summary": "Setup 2fa",
        "tags": ["TwoFactor"],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "twoFactor.store",
        "description": "Updates a user's account to have two-factor enabled.",
        "summary": "Enable 2fa",
        "tags": ["TwoFactor"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "example": "recovery_tokens"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "tokens": {
                          "type": "string"
                        }
                      },
                      "required": ["tokens"]
                    }
                  },
                  "required": ["object", "attributes"]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "twoFactor.delete",
        "description": "Disables two-factor authentication on an account if the password provided\nis valid.",
        "summary": "Disable 2fa",
        "tags": ["TwoFactor"],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/servers/{server}/websocket": {
      "get": {
        "operationId": "api:client:server.ws",
        "description": "Generates a one-time token that is sent along in every websocket call to the Daemon.\nThis is a signed JWT that the Daemon then uses to verify the user's identity, and\nallows us to continually renew this token and avoid users maintaining sessions wrongly,\nas well as ensure that user's only perform actions they're allowed to.",
        "summary": "Get websocket token",
        "tags": ["Websocket"],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "required": true,
            "description": "The server UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string"
                        },
                        "socket": {
                          "type": "string"
                        }
                      },
                      "required": ["token", "socket"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "http": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": ""
      }
    },
    "responses": {
      "ValidationException": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Errors overview."
                },
                "errors": {
                  "type": "object",
                  "description": "A detailed description of each field that failed validation.",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "required": ["message", "errors"]
            }
          }
        }
      },
      "AuthorizationException": {
        "description": "Authorization error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Error overview."
                }
              },
              "required": ["message"]
            }
          }
        }
      },
      "ModelNotFoundException": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Error overview."
                }
              },
              "required": ["message"]
            }
          }
        }
      },
      "NotFoundHttpException": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Error overview."
                }
              },
              "required": ["message"]
            }
          }
        }
      }
    }
  }
}
